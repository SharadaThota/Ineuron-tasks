{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c8453099",
   "metadata": {},
   "outputs": [],
   "source": [
    "s = \"this is My First Python programming class and i am learNING python string and its function\"\n",
    "1 . Try to extract data from index one to index 300 with a jump of 3 \n",
    "2. Try to reverse a string without using reverse function \n",
    "3. Try to split a string after conversion of entire string in uppercase \n",
    "4. try to convert the whole string into lower case\n",
    "5.Try to capitalize the whole string.\n",
    "6 . Write a diference between isalnum() and isalpha()\n",
    "7. Try to give an example of expand tab\n",
    "8 . Give an example of strip , lstrip and rstrip \n",
    "9.  Replace a string charecter by another charector by taking your own example \n",
    "\"sudhanshu\"\n",
    "10 . Try  to give a defination of string center function with and exmple \n",
    "11 . Write your own definition of compiler and interpretor without copy paste form internet in your own language\n",
    "12 . Python is a interpreted of compiled language give a clear ans with your understanding \n",
    "13 . Try to write a usecase of python with your understanding .\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2f9a4f72",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Dacn   tdcla e auscnf td ossaotsnstsoxa oeeniitfmoysuudnutcr t dpynlgfma rs o n  pci mn tseeset  tmi'"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#1)1 . Try to extract data from index one to index 300 with a jump of 3 \n",
    " Try to reverse a string without using reverse functiondata1[0:300:3]"
   ]
  },
  {
   "cell_type": "raw",
   "id": "51f729a0",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "253c2b16",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "55"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#2) Try to reverse a string without using reverse function.\n",
    "s1=\"Try to reverse a string without using reverse function.\"\n",
    "len(s1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "505df1bb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'.noitcnuf esrever gnisu tuohtiw gnirts a esrever ot yrT'"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s1[::-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "a626815e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#3)3. Try to split a string after conversion of entire string in uppercase \n",
    "s2=\" Try to split a string after conversion of entire string in uppercase.\"\n",
    "s3 = s2.upper()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "31e7c389",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['',\n",
       " 'TRY',\n",
       " 'TO',\n",
       " 'SPLIT',\n",
       " 'A',\n",
       " 'STRING',\n",
       " 'AFTER',\n",
       " 'CONVERSION',\n",
       " 'OF',\n",
       " 'ENTIRE',\n",
       " 'STRING',\n",
       " 'IN',\n",
       " 'UPPERCASE.']"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s3.split(' ')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "c9ad271a",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 's3' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp/ipykernel_5676/834128321.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0ms3\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m: name 's3' is not defined"
     ]
    }
   ],
   "source": [
    "s3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "eb5333f8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'this is the sample string for conversion to lower case'"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#4)try to convert the whole string into lower case \n",
    "s4=\"THIS IS THE SAMPLE STRING FOR CONVERSION TO LOWER CASE\"\n",
    "s4.lower()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "4dff2b93",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'This is the sample string for capitalization'"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#5)5.Try to capitalize the whole string.\n",
    "s5=\"this is the samplE string for capitalization\"\n",
    "s5.capitalize()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "de8784b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "#6) Write a diference between isalnum() and isalpha()\n",
    "#isanum()vs isalpha(): while isalpla() function checks for the presence of alphabet in the string, isanum()\n",
    "# checks for alphabet and numericals in the given string..\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "706d8194",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hi    ,This is Sharada, I'm   pursuing    FSDScouse   in    INEURON\n"
     ]
    }
   ],
   "source": [
    "#7)give an example of exapnd tab\n",
    "s6= \"Hi\\t,This is Sharada,\\tI'm\\tpursuing\\tFSDScouse\\tin\\tINEURON\"\n",
    "print(s6.expandtabs(6))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "ea94edb1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'strip sample text'"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#)8Give an example strip , lstrip and rstrip\n",
    "s7=\"      strip sample text\"\n",
    "s7.lstrip()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "a7b5bd0d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'strip sample test'"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s8=\"strip sample test     \"\n",
    "s8.rstrip()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "6414f7af",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'strip sample strip'"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s9=\"  strip sample strip   \"\n",
    "s9.strip()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "dba0516a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'shiridi'"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#9) replace a string character by another dtring character by taking your own example\n",
    "s10=\"sharada\"\n",
    "s10.replace('a','i')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "4eb497a0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'sharada'"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#10) Give a defintion of string centre function with an example.\n",
    "\n",
    "s10\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "076a25a0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'*****sharada******'"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s10.center(18,\"*\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e9dfbb1c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
